#!/bin/bash

do_build=
verbose=
default_yes=
quiet=

prompt() {
    while true; do
        read -r -p "Continue (Y/n)? " yn
        case $yn in
            Y|y ) do_build=1; break;;
            "" ) do_build=1; break;;
            N|n ) do_build=0; break;;
            * ) echo "Please answer y or n!";;
        esac
    done 
}

sudo_if_required() {
    if [[ $(id -u) != 0 ]]; then
        sudo "$@"
    else
        "$@"
    fi
}

print_help() {
    cat <<EOF
rebuild-initramfs: rebuild some (or all) initramfs images using dracut.

Usage: rebuild-initramfs [-h | --help] [-v | --verbose]
Command line options:
    -h, --help: prints this help message
    -y, --yes: say "yes" to all questions
    -v, --verbose: be more verbose
    -q, --quiet: be quiet
EOF
}

if [[ -t 1 ]]; then
    YELLOW="\e[33m"
    COLOROFF="\e[39m"
fi

# shellcheck disable=SC2059
[[ $(id -u) == 0 ]] && ([[ -z "$SUDO_UID" ]] ||
    printf "${YELLOW}WARNING:${COLOROFF} Don't run this script with sudo. This script will call out to sudo if required.\n" >&2)

for arg in "$@"
do
    case $arg in
        -v|--verbose)
            verbose=1
            echo "Running in verbose mode."
            shift;;
        -y|--yes)
            default_yes=1
            shift;;
        -q|--quiet)
            quiet=1
            shift;;
        -h|--help)
            print_help
            exit;;
    esac
done

if [[ "$verbose" == "1" ]] && [[ "$quiet" == "1" ]]; then
    >&2 echo "Cannot be verbose and quiet simultaneously!"
    exit 1
fi

# Generate a list of kernels to work on
mapfile -t kernels < <(ls -d /usr/lib/modules/*/)

for k in "${kernels[@]}"; do
    version=$(basename "$k")
    base=$(pacman -Qoq "$k" 2>/dev/null | head -n -1)

    if [[ "$base" == "" ]]; then
        [[ -z $verbose ]] || >&2 echo "${version} is detected, but it is not an installed kernel!"
        break
    fi
    
    ([[ -n $default_yes ]] && [[ -n $quiet ]]) || printf 'Rebuild initramfs for: %s...\n' "$base"

    if [[ -z $default_yes ]]; then
        prompt
    else
        do_build=1
    fi

    if [[ "$do_build" == "1" ]]; then
        if [[ -n $verbose ]]; then
            echo "Running: dracut -v -f -N /boot/initramfs-${base}.img --kver ${version}"
            sudo_if_required dracut -v -f -N /boot/initramfs-"${base}".img --kver "${version}"
            echo "Running: dracut -v -f --no-hostonly-cmdline /boot/initramfs-${base}-fallback.img --kver ${version}"
            sudo_if_required dracut -v -f --no-hostonly-cmdline /boot/initramfs-"${base}"-fallback.img --kver "${version}"
        elif [[ -n $quiet ]]; then
            sudo_if_required dracut -q -f -N /boot/initramfs-"${base}".img --kver "${version}"
            sudo_if_required dracut -q -f --no-hostonly-cmdline /boot/initramfs-"${base}"-fallback.img --kver "${version}"
        else
            sudo_if_required dracut -f -N /boot/initramfs-"${base}".img --kver "${version}"
            sudo_if_required dracut -f --no-hostonly-cmdline /boot/initramfs-"${base}"-fallback.img --kver "${version}"
        fi
    else
        [[ -z $verbose ]] || echo "Not rebuilding initramfs image for ${version}."
    fi 
done

