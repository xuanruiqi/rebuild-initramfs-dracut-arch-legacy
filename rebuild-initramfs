#!/bin/bash

do_build=
verbose=
default_yes=
quiet=
sudo_ok=
rebuild_for=
no_colors=

prompt() {
    while true; do
        read -r -p "Continue (Y/n)? " yn
        case $yn in
            Y|y ) do_build=1; break;;
            "" ) do_build=1; break;;
            N|n ) do_build=0; break;;
            * ) echo "Please answer y or n!";;
        esac
    done
}

sudo_if_required() {
    if [[ $(id -u) != 0 ]]; then
        sudo "$@"
    else
        "$@"
    fi
}

rebuild_for_base() {
    [[ -n $default_yes ]] && [[ -n $quiet ]] ||
        printf '%b::%b Rebuild initramfs for: %s...\n' "$BLUE" "$COLOROFF" "$base"

    if [[ -z $default_yes ]]; then
        prompt
    else
        do_build=1
    fi

    if [[ "$do_build" == "1" ]]; then
        if [[ -n $verbose ]]; then
            printf "%b*%b Building initramfs for %s\n" "$BLUE" "$COLOROFF" "${version}"
            printf "%bINFO%b: Running: dracut -v -f --no-hostonly-cmdline /boot/initramfs-%s.img --kver %s\n" "$GREEN" "$COLOROFF" \
                   "${base}" "${version}"
            sudo_if_required dracut -v -f --no-hostonly-cmdline /boot/initramfs-"${base}".img --kver "${version}"
            printf "%b*%b Building fallback initramfs for %s\n" "$GREEN" "$COLOROFF" "${version}"
            printf "%bINFO%b: Running: dracut -v -f -N /boot/initramfs-%s-fallback.img --kver %s\n" "$GREEN" "$COLOROFF" \
                   "${base}" "${version}"
            sudo_if_required dracut -v -f -N /boot/initramfs-"${base}"-fallback.img --kver "${version}"
        elif [[ -n $quiet ]]; then
            sudo_if_required dracut -q -f --no-hostonly-cmdline /boot/initramfs-"${base}".img --kver "${version}"
            sudo_if_required dracut -q -f -N /boot/initramfs-"${base}"-fallback.img --kver "${version}"
        else
            printf "%b*%b Building initramfs for %s\n" "$BLUE" "$COLOROFF" "${version}"
            sudo_if_required dracut -f --no-hostonly-cmdline /boot/initramfs-"${base}".img --kver "${version}"
            printf "%b*%b Building fallback initramfs for %s\n" "$BLUE" "$COLOROFF" "${version}"
            sudo_if_required dracut -f -N /boot/initramfs-"${base}"-fallback.img --kver "${version}"
        fi
    else
        [[ -z $verbose ]] || printf "%bINFO:%b Not rebuilding initramfs image for %s.\n" "$GREEN" "$COLOROFF" "${version}"
    fi
}

print_help() {
    cat <<EOF
rebuild-initramfs: rebuild some (or all) initramfs images using dracut.
Usage: rebuild-initramfs [-h | --help] [-v | --verbose] [kernel package name]

If a kernel package name is not given, then by default all initramfs images will be rebuilt.

  Options:
   -h, --help       Prints this help message
   -y, --yes        Say "yes" to all questions
   -v, --verbose    Be more verbose
   -k, --hook       Running inside a pacman/ALPM hook. This will suppress some warnings, and
                    enable "-y" as well. Do NOT use it when you are running in interactive mode.
   --no-colors      Don't use colors.
   -q, --quiet      Be quiet
EOF
}

for arg in "$@"
do
    case $arg in
        -v|--verbose)
            verbose=1
            shift;;
        -y|--yes)
            default_yes=1
            shift;;
        -q|--quiet)
            quiet=1
            shift;;
        -h|--help)
            print_help
            exit 1;;
        -k|--hook)
            default_yes=1
            sudo_ok=1
            shift;;
        --no-colors)
            no_colors=1
            shift;;
        *)
            rebuild_for=$arg
            shift;;
    esac
done

# Use colors only if we are running in a terminal that supports colors...
# and the user doesn't say they don't want colors
if [[ -z $no_colors ]] && [[ -t 1 ]] && [[ -n $(tput colors) ]]; then
    RED="\e[31m"
    GREEN="\e[32m"
    YELLOW="\e[33m"
    BLUE="\e[34m"
    COLOROFF="\e[39m"
fi

[[ $(id -u) == 0 ]] && ([[ -z "$SUDO_UID" ]] || ([[ -n "$sudo_ok" ]] ||
    printf "%bWARNING:%b Don't run this script under sudo. This script will call out to sudo if required.\n" "$YELLOW" "$COLOROFF" >&2))

if [[ "$verbose" == "1" ]] && [[ "$quiet" == "1" ]]; then
    printf "%bERROR%b: Cannot be verbose and quiet simultaneously!\n" "$RED" "$COLOROFF" >&2
    exit 1
fi

if [ -n "$verbose" ]; then
    printf "%bINFO%b: Running in verbose mode...\n" "$GREEN" "$COLOROFF" >&2
fi

if [ -n "$rebuild_for" ]; then
    if ! (pacman -Q "$rebuild_for" > /dev/null 2>&1) ; then
        printf "%bERROR%b: %s is not an installed kernel!\n" "$RED" "$COLOROFF" "$rebuild_for" >&2
        exit 1
    fi

    base="$rebuild_for"
    _path=$(pacman -Ql "$rebuild_for" | grep "/usr/lib/modules/.\+" | head -n 1 | sed 's/^[^[:space:]]*[[:space:]]\{1,\}//')
    version=$(basename "$_path")

    rebuild_for_base

    exit
fi

# Generate a list of kernels to work on
mapfile -t kernels < <(ls -d /usr/lib/modules/*/)

for k in "${kernels[@]}"; do
    version=$(basename "$k")
    base=$(pacman -Qoq "$k" 2>/dev/null | head -n 1)

    if [[ "$base" == "" ]]; then
        [[ -z $verbose ]] ||
            printf "%bWARNING:%b %s is detected, but it is not an installed kernel!\n" "$YELLOW" "$COLOROFF" "${version}" >&2
        break
    fi

    rebuild_for_base
done
