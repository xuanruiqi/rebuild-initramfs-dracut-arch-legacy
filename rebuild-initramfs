#!/bin/bash

do_build=
verbose=
default_yes=
quiet=
sudo_ok=
no_colors=
do_sign=
sb_key=
sb_cert=

rebuild_for=()

prompt() {
    while true; do
        read -r -p "Continue (Y/n)? " yn
        case $yn in
            Y|y ) do_build=1; break;;
            "" ) do_build=1; break;;
            N|n ) do_build=0; break;;
            * ) echo "Please answer y or n!";;
        esac
    done
}

sudo_if_required() {
    if [[ $(id -u) != 0 ]]; then
        sudo "$@"
    else
        "$@"
    fi
}

rebuild_for_base() {
    [[ -n $default_yes ]] && [[ -n $quiet ]] ||
        printf '%b::%b Rebuild initramfs for: %s...\n' "$BLUE" "$COLOROFF" "$base"

    if [[ -z $default_yes ]]; then
        prompt
    else
        do_build=1
    fi

    if [[ "$do_build" == "1" ]]; then
        if [[ -n $verbose ]]; then
            printf "%b*%b Building initramfs for %s\n" "$BLUE" "$COLOROFF" "${version}"
            printf "%bINFO%b: Running: dracut -v -f --no-hostonly-cmdline /boot/initramfs-%s.img --kver %s\n" "$GREEN" "$COLOROFF" \
                   "${base}" "${version}"
            sudo_if_required dracut -v -f --no-hostonly-cmdline /boot/initramfs-"${base}".img --kver "${version}"
            printf "%b*%b Building fallback initramfs for %s\n" "$GREEN" "$COLOROFF" "${version}"
            printf "%bINFO%b: Running: dracut -v -f -N /boot/initramfs-%s-fallback.img --kver %s\n" "$GREEN" "$COLOROFF" \
                   "${base}" "${version}"
            sudo_if_required dracut -v -f -N /boot/initramfs-"${base}"-fallback.img --kver "${version}"
            if [[ -d /boot ]]; then
                printf "%b*%b Copying vmlinuz to /boot for %s\n" "$BLUE" "$COLOROFF" "${version}"
                printf "%bINFO%b: Running: install -Dm644 /usr/lib/modules/%s/vmlinuz /boot/vmlinuz-%s\n" "$GREEN" "$COLOROFF" \
                       "${version}" "${base}"
                sudo_if_required install -Dm644 "/usr/lib/modules/${version}/vmlinuz" "/boot/vmlinuz-${base}"
                if (( do_sign )); then
                    printf "%b*%b Signing vmlinuz for %s\n" "$BLUE" "$COLOROFF" "${version}"
                    printf "%bINFO%b: Running: sbsign --key %s --cert %s --output /boot/vmlinuz-%s /boot/vmlinuz-%s" "$GREEN" "$COLOROFF" \
                           "${sb_key}" "${sb_cert}" "${base}" "${base}"
                    sudo_if_required sbsign --key "${sb_key}" --cert "${sb_cert}" --output "/boot/vmlinuz-${base}" "/boot/vmlinuz-${base}"
                fi
            fi
        elif [[ -n $quiet ]]; then
            sudo_if_required dracut -q -f --no-hostonly-cmdline /boot/initramfs-"${base}".img --kver "${version}"
            sudo_if_required dracut -q -f -N /boot/initramfs-"${base}"-fallback.img --kver "${version}"
            if [[ -d /boot ]]; then
                sudo_if_required install -Dm644 "/usr/lib/modules/${version}/vmlinuz" "/boot/vmlinuz-${base}"
                (( do_sign )) && sudo_if_required sbsign --key "${sb_key}" --cert "${sb_cert}" --output \
                                                      "/boot/vmlinuz-${base}" "/boot/vmlinuz-${base}"
            fi
        else
            printf "%b*%b Building initramfs for %s\n" "$BLUE" "$COLOROFF" "${version}"
            sudo_if_required dracut -f --no-hostonly-cmdline /boot/initramfs-"${base}".img --kver "${version}"
            printf "%b*%b Building fallback initramfs for %s\n" "$BLUE" "$COLOROFF" "${version}"
            sudo_if_required dracut -f -N /boot/initramfs-"${base}"-fallback.img --kver "${version}"
            if [[ -d /boot ]]; then
                printf "%b*%b Copying vmlinuz to /boot for %s\n" "$BLUE" "$COLOROFF" "${version}"
                sudo_if_required install -Dm644 "/usr/lib/modules/${version}/vmlinuz" "/boot/vmlinuz-${base}"
                if (( do_sign )); then
                    printf "%b*%b Signing vmlinuz for %s\n" "$BLUE" "$COLOROFF" "${version}"
                    sudo_if_required sbsign --key "${sb_key}" --cert "${sb_cert}" --output "/boot/vmlinuz-${base}" "/boot/vmlinuz-${base}"
                fi
            fi
        fi
    else
        [[ -z $verbose ]] || printf "%bINFO:%b Not rebuilding initramfs image for %s.\n" "$GREEN" "$COLOROFF" "${version}"
    fi
}

print_help() {
    cat <<EOF
rebuild-initramfs: rebuild some (or all) initramfs images using dracut.
Usage: rebuild-initramfs [-h | --help] | [options] [kernel package name]

If a kernel package name is not given, then by default all initramfs images will be rebuilt.

  Options:
   -h, --help       Prints this help message
   -y, --yes        Say "yes" to all questions
   -v, --verbose    Be more verbose
   -k, --hook       Running inside a pacman/ALPM hook. This will suppress some warnings, and
                    enable "-y" as well. Do NOT use it when you are running in interactive mode.
   --key  key_file  Machine Owner Key (MOK) key used to sign kernel image for Secure Boot.
   --cert cert_file MOK certificate used to sign kernel image for Secure Boot.
   --no-colors      Don't use colors.
   -q, --quiet      Be quiet
EOF
}

while [[ $# -gt 0 ]]
do
    arg=$1
    case $arg in
        -v|--verbose)
            verbose=1
            shift;;
        -y|--yes)
            default_yes=1
            shift;;
        -q|--quiet)
            quiet=1
            shift;;
        -h|--help)
            print_help
            exit 1;;
        -k|--hook)
            default_yes=1
            sudo_ok=1
            shift;;
        --key)
            sb_key=$2
            shift 2;;
        --cert)
            sb_cert=$2
            shift 2;;
        --no-colors)
            no_colors=1
            shift;;
        *)
            rebuild_for+=("${arg}")
            shift;;
    esac
done

# Use colors only if we are running in a terminal that supports colors...
# and the user doesn't say they don't want colors
if [[ -z $no_colors ]] && [[ -t 1 ]] && [[ -n $(tput colors) ]]; then
    RED="\e[31m"
    GREEN="\e[32m"
    YELLOW="\e[33m"
    BLUE="\e[34m"
    COLOROFF="\e[39m"
fi

# prority given to key and cert given as command line arugments
if [[ -n $sb_key && -n $sb_cert ]]; then
    do_sign=1
else
    if [[ -f /etc/rebuild-initramfs.conf ]]; then
        source /etc/rebuild-initramfs.conf
    fi

    if [[ -n $key_path && -n $cert_path ]]; then
        do_sign=1
        sb_key=$key_path
        sb_cert=$cert_path
    elif [[ -z $sb_key && -z $sb_cert ]]; then
        do_sign=0
    else
        printf "%bERROR%b: To perform kernel image signing, both a key and a certificate must be provided!" "$RED" "$COLOROFF" >&2
        exit 1
    fi
fi

if (( do_sign )) && ! command -v sbsign &> /dev/null; then
    printf "%bERROR%b: To perform kernel image signing, the %bsbsigntools%b package must be installed!" "$RED" "$COLOROFF" "$BLUE" "$COLOROFF" >&2
    exit 1
fi

[[ $(id -u) == 0 ]] && ([[ -z "$SUDO_UID" ]] || ([[ -n "$sudo_ok" ]] ||
    printf "%bWARNING:%b Don't run this script under sudo. This script will call out to sudo if required.\n" "$YELLOW" "$COLOROFF" >&2))

if [[ "$verbose" == "1" ]] && [[ "$quiet" == "1" ]]; then
    printf "%bERROR%b: Cannot be verbose and quiet simultaneously!\n" "$RED" "$COLOROFF" >&2
    exit 1
fi

if [[ -n "$verbose" ]]; then
    printf "%bINFO%b: Running in verbose mode...\n" "$GREEN" "$COLOROFF" >&2
fi

if (( ${#rebuild_for[@]} )); then
    for k in "${rebuild_for[@]}"; do
        if ! (pacman -Q "$k" > /dev/null 2>&1) ; then
            printf "%bWARNING%b: %s is not an installed kernel!\n" "$YELLOW" "$COLOROFF" "$k" >&2
            continue
        fi

        base="$k"
        _path=$(pacman -Ql "$k" | grep "/usr/lib/modules/.\+" | head -n 1 | sed 's/^[^[:space:]]*[[:space:]]\{1,\}//')
        version=$(basename "$_path")

        rebuild_for_base
    done

    exit
fi

# Generate a list of kernels to work on
mapfile -t kernels < <(ls -d /usr/lib/modules/*/)

for k in "${kernels[@]}"; do
    version=$(basename "$k")

    if [[ ! -f "${k}/pkgbase" ]]; then
        continue
    fi

    base=$(cat "${k}/pkgbase")

    if [[ "$base" == "" ]]; then
        [[ -z $verbose ]] ||
            printf "%bWARNING:%b %s is detected, but it is not an installed kernel!\n" "$YELLOW" "$COLOROFF" "${version}" >&2
        continue
    fi

    rebuild_for_base
done
